// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/appstoreApi/appstoreApi.proto

package appstoreApi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppStoreApi service

func NewAppStoreApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppStoreApi service

type AppStoreApiService interface {
	AddAppStore(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteAppStore(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateAppStore(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	FindAppStoreByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddInstallNum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetInstallNum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddViewNum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetViewNum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type appStoreApiService struct {
	c    client.Client
	name string
}

func NewAppStoreApiService(name string, c client.Client) AppStoreApiService {
	return &appStoreApiService{
		c:    c,
		name: name,
	}
}

func (c *appStoreApiService) AddAppStore(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStoreApi.AddAppStore", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreApiService) DeleteAppStore(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStoreApi.DeleteAppStore", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreApiService) UpdateAppStore(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStoreApi.UpdateAppStore", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreApiService) FindAppStoreByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStoreApi.FindAppStoreByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreApiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStoreApi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreApiService) AddInstallNum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStoreApi.AddInstallNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreApiService) GetInstallNum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStoreApi.GetInstallNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreApiService) AddViewNum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStoreApi.AddViewNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreApiService) GetViewNum(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStoreApi.GetViewNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppStoreApi service

type AppStoreApiHandler interface {
	AddAppStore(context.Context, *Request, *Response) error
	DeleteAppStore(context.Context, *Request, *Response) error
	UpdateAppStore(context.Context, *Request, *Response) error
	FindAppStoreByID(context.Context, *Request, *Response) error
	Call(context.Context, *Request, *Response) error
	AddInstallNum(context.Context, *Request, *Response) error
	GetInstallNum(context.Context, *Request, *Response) error
	AddViewNum(context.Context, *Request, *Response) error
	GetViewNum(context.Context, *Request, *Response) error
}

func RegisterAppStoreApiHandler(s server.Server, hdlr AppStoreApiHandler, opts ...server.HandlerOption) error {
	type appStoreApi interface {
		AddAppStore(ctx context.Context, in *Request, out *Response) error
		DeleteAppStore(ctx context.Context, in *Request, out *Response) error
		UpdateAppStore(ctx context.Context, in *Request, out *Response) error
		FindAppStoreByID(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
		AddInstallNum(ctx context.Context, in *Request, out *Response) error
		GetInstallNum(ctx context.Context, in *Request, out *Response) error
		AddViewNum(ctx context.Context, in *Request, out *Response) error
		GetViewNum(ctx context.Context, in *Request, out *Response) error
	}
	type AppStoreApi struct {
		appStoreApi
	}
	h := &appStoreApiHandler{hdlr}
	return s.Handle(s.NewHandler(&AppStoreApi{h}, opts...))
}

type appStoreApiHandler struct {
	AppStoreApiHandler
}

func (h *appStoreApiHandler) AddAppStore(ctx context.Context, in *Request, out *Response) error {
	return h.AppStoreApiHandler.AddAppStore(ctx, in, out)
}

func (h *appStoreApiHandler) DeleteAppStore(ctx context.Context, in *Request, out *Response) error {
	return h.AppStoreApiHandler.DeleteAppStore(ctx, in, out)
}

func (h *appStoreApiHandler) UpdateAppStore(ctx context.Context, in *Request, out *Response) error {
	return h.AppStoreApiHandler.UpdateAppStore(ctx, in, out)
}

func (h *appStoreApiHandler) FindAppStoreByID(ctx context.Context, in *Request, out *Response) error {
	return h.AppStoreApiHandler.FindAppStoreByID(ctx, in, out)
}

func (h *appStoreApiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.AppStoreApiHandler.Call(ctx, in, out)
}

func (h *appStoreApiHandler) AddInstallNum(ctx context.Context, in *Request, out *Response) error {
	return h.AppStoreApiHandler.AddInstallNum(ctx, in, out)
}

func (h *appStoreApiHandler) GetInstallNum(ctx context.Context, in *Request, out *Response) error {
	return h.AppStoreApiHandler.GetInstallNum(ctx, in, out)
}

func (h *appStoreApiHandler) AddViewNum(ctx context.Context, in *Request, out *Response) error {
	return h.AppStoreApiHandler.AddViewNum(ctx, in, out)
}

func (h *appStoreApiHandler) GetViewNum(ctx context.Context, in *Request, out *Response) error {
	return h.AppStoreApiHandler.GetViewNum(ctx, in, out)
}
